// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package projectname.travail_final_0_1;

import routines.Mathematical;
import routines.time;
import routines.ro;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Travail_final Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.1.20141207_1530
 * @status 
 */
public class Travail_final implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Travail_final";
	private final String projectName = "PROJECTNAME";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Travail_final.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Travail_final.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMysqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMysqlInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_1_SortOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Travail_final = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Travail_final = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code_r;

		public String getCode_r() {
			return this.code_r;
		}

		public String desig_r;

		public String getDesig_r() {
			return this.desig_r;
		}

		public String dif;

		public String getDif() {
			return this.dif;
		}

		public int jour;

		public int getJour() {
			return this.jour;
		}

		public Integer month;

		public Integer getMonth() {
			return this.month;
		}

		public String mois;

		public String getMois() {
			return this.mois;
		}

		public int annee;

		public int getAnnee() {
			return this.annee;
		}

		public Integer num_man;

		public Integer getNum_man() {
			return this.num_man;
		}

		public int code_p;

		public int getCode_p() {
			return this.code_p;
		}

		public String design_p;

		public String getDesign_p() {
			return this.design_p;
		}

		public String poste;

		public String getPoste() {
			return this.poste;
		}

		public String type_nav;

		public String getType_nav() {
			return this.type_nav;
		}

		public String nom_nav;

		public String getNom_nav() {
			return this.nom_nav;
		}

		public Integer sejour;

		public Integer getSejour() {
			return this.sejour;
		}

		public Integer num_gros;

		public Integer getNum_gros() {
			return this.num_gros;
		}

		public String pavilion;

		public String getPavilion() {
			return this.pavilion;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.code_r == null) ? 0 : this.code_r.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.code_r == null) {
				if (other.code_r != null)
					return false;

			} else if (!this.code_r.equals(other.code_r))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.code_r = this.code_r;
			other.desig_r = this.desig_r;
			other.dif = this.dif;
			other.jour = this.jour;
			other.month = this.month;
			other.mois = this.mois;
			other.annee = this.annee;
			other.num_man = this.num_man;
			other.code_p = this.code_p;
			other.design_p = this.design_p;
			other.poste = this.poste;
			other.type_nav = this.type_nav;
			other.nom_nav = this.nom_nav;
			other.sejour = this.sejour;
			other.num_gros = this.num_gros;
			other.pavilion = this.pavilion;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.code_r = this.code_r;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNAME_Travail_final.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNAME_Travail_final.length == 0) {
						commonByteArray_PROJECTNAME_Travail_final = new byte[1024];
					} else {
						commonByteArray_PROJECTNAME_Travail_final = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNAME_Travail_final, 0,
						length);
				strReturn = new String(
						commonByteArray_PROJECTNAME_Travail_final, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Travail_final) {

				try {

					int length = 0;

					this.code_r = readString(dis);

					this.desig_r = readString(dis);

					this.dif = readString(dis);

					this.jour = dis.readInt();

					this.month = readInteger(dis);

					this.mois = readString(dis);

					this.annee = dis.readInt();

					this.num_man = readInteger(dis);

					this.code_p = dis.readInt();

					this.design_p = readString(dis);

					this.poste = readString(dis);

					this.type_nav = readString(dis);

					this.nom_nav = readString(dis);

					this.sejour = readInteger(dis);

					this.num_gros = readInteger(dis);

					this.pavilion = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_r, dos);

				// String

				writeString(this.desig_r, dos);

				// String

				writeString(this.dif, dos);

				// int

				dos.writeInt(this.jour);

				// Integer

				writeInteger(this.month, dos);

				// String

				writeString(this.mois, dos);

				// int

				dos.writeInt(this.annee);

				// Integer

				writeInteger(this.num_man, dos);

				// int

				dos.writeInt(this.code_p);

				// String

				writeString(this.design_p, dos);

				// String

				writeString(this.poste, dos);

				// String

				writeString(this.type_nav, dos);

				// String

				writeString(this.nom_nav, dos);

				// Integer

				writeInteger(this.sejour, dos);

				// Integer

				writeInteger(this.num_gros, dos);

				// String

				writeString(this.pavilion, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_r=" + code_r);
			sb.append(",desig_r=" + desig_r);
			sb.append(",dif=" + dif);
			sb.append(",jour=" + String.valueOf(jour));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",mois=" + mois);
			sb.append(",annee=" + String.valueOf(annee));
			sb.append(",num_man=" + String.valueOf(num_man));
			sb.append(",code_p=" + String.valueOf(code_p));
			sb.append(",design_p=" + design_p);
			sb.append(",poste=" + poste);
			sb.append(",type_nav=" + type_nav);
			sb.append(",nom_nav=" + nom_nav);
			sb.append(",sejour=" + String.valueOf(sejour));
			sb.append(",num_gros=" + String.valueOf(num_gros));
			sb.append(",pavilion=" + pavilion);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code_r, other.code_r);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Travail_final = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Travail_final = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code_r;

		public String getCode_r() {
			return this.code_r;
		}

		public String desig_r;

		public String getDesig_r() {
			return this.desig_r;
		}

		public String dif;

		public String getDif() {
			return this.dif;
		}

		public int jour;

		public int getJour() {
			return this.jour;
		}

		public Integer month;

		public Integer getMonth() {
			return this.month;
		}

		public String mois;

		public String getMois() {
			return this.mois;
		}

		public int annee;

		public int getAnnee() {
			return this.annee;
		}

		public Integer num_man;

		public Integer getNum_man() {
			return this.num_man;
		}

		public int code_p;

		public int getCode_p() {
			return this.code_p;
		}

		public String design_p;

		public String getDesign_p() {
			return this.design_p;
		}

		public String poste;

		public String getPoste() {
			return this.poste;
		}

		public String type_nav;

		public String getType_nav() {
			return this.type_nav;
		}

		public String nom_nav;

		public String getNom_nav() {
			return this.nom_nav;
		}

		public Integer sejour;

		public Integer getSejour() {
			return this.sejour;
		}

		public Integer num_gros;

		public Integer getNum_gros() {
			return this.num_gros;
		}

		public String pavilion;

		public String getPavilion() {
			return this.pavilion;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.code_r == null) ? 0 : this.code_r.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtSortRow_1 other = (OnRowsEndStructtSortRow_1) obj;

			if (this.code_r == null) {
				if (other.code_r != null)
					return false;

			} else if (!this.code_r.equals(other.code_r))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtSortRow_1 other) {

			other.code_r = this.code_r;
			other.desig_r = this.desig_r;
			other.dif = this.dif;
			other.jour = this.jour;
			other.month = this.month;
			other.mois = this.mois;
			other.annee = this.annee;
			other.num_man = this.num_man;
			other.code_p = this.code_p;
			other.design_p = this.design_p;
			other.poste = this.poste;
			other.type_nav = this.type_nav;
			other.nom_nav = this.nom_nav;
			other.sejour = this.sejour;
			other.num_gros = this.num_gros;
			other.pavilion = this.pavilion;

		}

		public void copyKeysDataTo(OnRowsEndStructtSortRow_1 other) {

			other.code_r = this.code_r;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNAME_Travail_final.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNAME_Travail_final.length == 0) {
						commonByteArray_PROJECTNAME_Travail_final = new byte[1024];
					} else {
						commonByteArray_PROJECTNAME_Travail_final = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNAME_Travail_final, 0,
						length);
				strReturn = new String(
						commonByteArray_PROJECTNAME_Travail_final, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Travail_final) {

				try {

					int length = 0;

					this.code_r = readString(dis);

					this.desig_r = readString(dis);

					this.dif = readString(dis);

					this.jour = dis.readInt();

					this.month = readInteger(dis);

					this.mois = readString(dis);

					this.annee = dis.readInt();

					this.num_man = readInteger(dis);

					this.code_p = dis.readInt();

					this.design_p = readString(dis);

					this.poste = readString(dis);

					this.type_nav = readString(dis);

					this.nom_nav = readString(dis);

					this.sejour = readInteger(dis);

					this.num_gros = readInteger(dis);

					this.pavilion = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_r, dos);

				// String

				writeString(this.desig_r, dos);

				// String

				writeString(this.dif, dos);

				// int

				dos.writeInt(this.jour);

				// Integer

				writeInteger(this.month, dos);

				// String

				writeString(this.mois, dos);

				// int

				dos.writeInt(this.annee);

				// Integer

				writeInteger(this.num_man, dos);

				// int

				dos.writeInt(this.code_p);

				// String

				writeString(this.design_p, dos);

				// String

				writeString(this.poste, dos);

				// String

				writeString(this.type_nav, dos);

				// String

				writeString(this.nom_nav, dos);

				// Integer

				writeInteger(this.sejour, dos);

				// Integer

				writeInteger(this.num_gros, dos);

				// String

				writeString(this.pavilion, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_r=" + code_r);
			sb.append(",desig_r=" + desig_r);
			sb.append(",dif=" + dif);
			sb.append(",jour=" + String.valueOf(jour));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",mois=" + mois);
			sb.append(",annee=" + String.valueOf(annee));
			sb.append(",num_man=" + String.valueOf(num_man));
			sb.append(",code_p=" + String.valueOf(code_p));
			sb.append(",design_p=" + design_p);
			sb.append(",poste=" + poste);
			sb.append(",type_nav=" + type_nav);
			sb.append(",nom_nav=" + nom_nav);
			sb.append(",sejour=" + String.valueOf(sejour));
			sb.append(",num_gros=" + String.valueOf(num_gros));
			sb.append(",pavilion=" + pavilion);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code_r, other.code_r);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tStruct implements
			routines.system.IPersistableRow<tStruct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Travail_final = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Travail_final = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code_r;

		public String getCode_r() {
			return this.code_r;
		}

		public String desig_r;

		public String getDesig_r() {
			return this.desig_r;
		}

		public String dif;

		public String getDif() {
			return this.dif;
		}

		public int jour;

		public int getJour() {
			return this.jour;
		}

		public Integer month;

		public Integer getMonth() {
			return this.month;
		}

		public String mois;

		public String getMois() {
			return this.mois;
		}

		public int annee;

		public int getAnnee() {
			return this.annee;
		}

		public Integer num_man;

		public Integer getNum_man() {
			return this.num_man;
		}

		public int code_p;

		public int getCode_p() {
			return this.code_p;
		}

		public String design_p;

		public String getDesign_p() {
			return this.design_p;
		}

		public String poste;

		public String getPoste() {
			return this.poste;
		}

		public String type_nav;

		public String getType_nav() {
			return this.type_nav;
		}

		public String nom_nav;

		public String getNom_nav() {
			return this.nom_nav;
		}

		public Integer sejour;

		public Integer getSejour() {
			return this.sejour;
		}

		public Integer num_gros;

		public Integer getNum_gros() {
			return this.num_gros;
		}

		public String pavilion;

		public String getPavilion() {
			return this.pavilion;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.code_r == null) ? 0 : this.code_r.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final tStruct other = (tStruct) obj;

			if (this.code_r == null) {
				if (other.code_r != null)
					return false;

			} else if (!this.code_r.equals(other.code_r))

				return false;

			return true;
		}

		public void copyDataTo(tStruct other) {

			other.code_r = this.code_r;
			other.desig_r = this.desig_r;
			other.dif = this.dif;
			other.jour = this.jour;
			other.month = this.month;
			other.mois = this.mois;
			other.annee = this.annee;
			other.num_man = this.num_man;
			other.code_p = this.code_p;
			other.design_p = this.design_p;
			other.poste = this.poste;
			other.type_nav = this.type_nav;
			other.nom_nav = this.nom_nav;
			other.sejour = this.sejour;
			other.num_gros = this.num_gros;
			other.pavilion = this.pavilion;

		}

		public void copyKeysDataTo(tStruct other) {

			other.code_r = this.code_r;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNAME_Travail_final.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNAME_Travail_final.length == 0) {
						commonByteArray_PROJECTNAME_Travail_final = new byte[1024];
					} else {
						commonByteArray_PROJECTNAME_Travail_final = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNAME_Travail_final, 0,
						length);
				strReturn = new String(
						commonByteArray_PROJECTNAME_Travail_final, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Travail_final) {

				try {

					int length = 0;

					this.code_r = readString(dis);

					this.desig_r = readString(dis);

					this.dif = readString(dis);

					this.jour = dis.readInt();

					this.month = readInteger(dis);

					this.mois = readString(dis);

					this.annee = dis.readInt();

					this.num_man = readInteger(dis);

					this.code_p = dis.readInt();

					this.design_p = readString(dis);

					this.poste = readString(dis);

					this.type_nav = readString(dis);

					this.nom_nav = readString(dis);

					this.sejour = readInteger(dis);

					this.num_gros = readInteger(dis);

					this.pavilion = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_r, dos);

				// String

				writeString(this.desig_r, dos);

				// String

				writeString(this.dif, dos);

				// int

				dos.writeInt(this.jour);

				// Integer

				writeInteger(this.month, dos);

				// String

				writeString(this.mois, dos);

				// int

				dos.writeInt(this.annee);

				// Integer

				writeInteger(this.num_man, dos);

				// int

				dos.writeInt(this.code_p);

				// String

				writeString(this.design_p, dos);

				// String

				writeString(this.poste, dos);

				// String

				writeString(this.type_nav, dos);

				// String

				writeString(this.nom_nav, dos);

				// Integer

				writeInteger(this.sejour, dos);

				// Integer

				writeInteger(this.num_gros, dos);

				// String

				writeString(this.pavilion, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_r=" + code_r);
			sb.append(",desig_r=" + desig_r);
			sb.append(",dif=" + dif);
			sb.append(",jour=" + String.valueOf(jour));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",mois=" + mois);
			sb.append(",annee=" + String.valueOf(annee));
			sb.append(",num_man=" + String.valueOf(num_man));
			sb.append(",code_p=" + String.valueOf(code_p));
			sb.append(",design_p=" + design_p);
			sb.append(",poste=" + poste);
			sb.append(",type_nav=" + type_nav);
			sb.append(",nom_nav=" + nom_nav);
			sb.append(",sejour=" + String.valueOf(sejour));
			sb.append(",num_gros=" + String.valueOf(num_gros));
			sb.append(",pavilion=" + pavilion);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code_r, other.code_r);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Travail_final = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Travail_final = new byte[0];

		public String code_r;

		public String getCode_r() {
			return this.code_r;
		}

		public String desig_r;

		public String getDesig_r() {
			return this.desig_r;
		}

		public String hdm;

		public String getHdm() {
			return this.hdm;
		}

		public String hfm;

		public String getHfm() {
			return this.hfm;
		}

		public Integer jour;

		public Integer getJour() {
			return this.jour;
		}

		public Integer month;

		public Integer getMonth() {
			return this.month;
		}

		public Integer annee;

		public Integer getAnnee() {
			return this.annee;
		}

		public Integer num_man;

		public Integer getNum_man() {
			return this.num_man;
		}

		public int code_p;

		public int getCode_p() {
			return this.code_p;
		}

		public String design_p;

		public String getDesign_p() {
			return this.design_p;
		}

		public Integer num_gros;

		public Integer getNum_gros() {
			return this.num_gros;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNAME_Travail_final.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNAME_Travail_final.length == 0) {
						commonByteArray_PROJECTNAME_Travail_final = new byte[1024];
					} else {
						commonByteArray_PROJECTNAME_Travail_final = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNAME_Travail_final, 0,
						length);
				strReturn = new String(
						commonByteArray_PROJECTNAME_Travail_final, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Travail_final) {

				try {

					int length = 0;

					this.code_r = readString(dis);

					this.desig_r = readString(dis);

					this.hdm = readString(dis);

					this.hfm = readString(dis);

					this.jour = readInteger(dis);

					this.month = readInteger(dis);

					this.annee = readInteger(dis);

					this.num_man = readInteger(dis);

					this.code_p = dis.readInt();

					this.design_p = readString(dis);

					this.num_gros = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_r, dos);

				// String

				writeString(this.desig_r, dos);

				// String

				writeString(this.hdm, dos);

				// String

				writeString(this.hfm, dos);

				// Integer

				writeInteger(this.jour, dos);

				// Integer

				writeInteger(this.month, dos);

				// Integer

				writeInteger(this.annee, dos);

				// Integer

				writeInteger(this.num_man, dos);

				// int

				dos.writeInt(this.code_p);

				// String

				writeString(this.design_p, dos);

				// Integer

				writeInteger(this.num_gros, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_r=" + code_r);
			sb.append(",desig_r=" + desig_r);
			sb.append(",hdm=" + hdm);
			sb.append(",hfm=" + hfm);
			sb.append(",jour=" + String.valueOf(jour));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",annee=" + String.valueOf(annee));
			sb.append(",num_man=" + String.valueOf(num_man));
			sb.append(",code_p=" + String.valueOf(code_p));
			sb.append(",design_p=" + design_p);
			sb.append(",num_gros=" + String.valueOf(num_gros));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tMysqlInput_1Struct implements
			routines.system.IPersistableRow<after_tMysqlInput_1Struct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Travail_final = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Travail_final = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code_r;

		public String getCode_r() {
			return this.code_r;
		}

		public String desig_r;

		public String getDesig_r() {
			return this.desig_r;
		}

		public String hdm;

		public String getHdm() {
			return this.hdm;
		}

		public String hfm;

		public String getHfm() {
			return this.hfm;
		}

		public Integer jour;

		public Integer getJour() {
			return this.jour;
		}

		public Integer month;

		public Integer getMonth() {
			return this.month;
		}

		public Integer annee;

		public Integer getAnnee() {
			return this.annee;
		}

		public Integer num_man;

		public Integer getNum_man() {
			return this.num_man;
		}

		public int code_p;

		public int getCode_p() {
			return this.code_p;
		}

		public String design_p;

		public String getDesign_p() {
			return this.design_p;
		}

		public Integer num_gros;

		public Integer getNum_gros() {
			return this.num_gros;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.code_r == null) ? 0 : this.code_r.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tMysqlInput_1Struct other = (after_tMysqlInput_1Struct) obj;

			if (this.code_r == null) {
				if (other.code_r != null)
					return false;

			} else if (!this.code_r.equals(other.code_r))

				return false;

			return true;
		}

		public void copyDataTo(after_tMysqlInput_1Struct other) {

			other.code_r = this.code_r;
			other.desig_r = this.desig_r;
			other.hdm = this.hdm;
			other.hfm = this.hfm;
			other.jour = this.jour;
			other.month = this.month;
			other.annee = this.annee;
			other.num_man = this.num_man;
			other.code_p = this.code_p;
			other.design_p = this.design_p;
			other.num_gros = this.num_gros;

		}

		public void copyKeysDataTo(after_tMysqlInput_1Struct other) {

			other.code_r = this.code_r;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNAME_Travail_final.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNAME_Travail_final.length == 0) {
						commonByteArray_PROJECTNAME_Travail_final = new byte[1024];
					} else {
						commonByteArray_PROJECTNAME_Travail_final = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNAME_Travail_final, 0,
						length);
				strReturn = new String(
						commonByteArray_PROJECTNAME_Travail_final, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Travail_final) {

				try {

					int length = 0;

					this.code_r = readString(dis);

					this.desig_r = readString(dis);

					this.hdm = readString(dis);

					this.hfm = readString(dis);

					this.jour = readInteger(dis);

					this.month = readInteger(dis);

					this.annee = readInteger(dis);

					this.num_man = readInteger(dis);

					this.code_p = dis.readInt();

					this.design_p = readString(dis);

					this.num_gros = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_r, dos);

				// String

				writeString(this.desig_r, dos);

				// String

				writeString(this.hdm, dos);

				// String

				writeString(this.hfm, dos);

				// Integer

				writeInteger(this.jour, dos);

				// Integer

				writeInteger(this.month, dos);

				// Integer

				writeInteger(this.annee, dos);

				// Integer

				writeInteger(this.num_man, dos);

				// int

				dos.writeInt(this.code_p);

				// String

				writeString(this.design_p, dos);

				// Integer

				writeInteger(this.num_gros, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_r=" + code_r);
			sb.append(",desig_r=" + desig_r);
			sb.append(",hdm=" + hdm);
			sb.append(",hfm=" + hfm);
			sb.append(",jour=" + String.valueOf(jour));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",annee=" + String.valueOf(annee));
			sb.append(",num_man=" + String.valueOf(num_man));
			sb.append(",code_p=" + String.valueOf(code_p));
			sb.append(",design_p=" + design_p);
			sb.append(",num_gros=" + String.valueOf(num_gros));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tMysqlInput_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code_r, other.code_r);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_1Process(globalMap);
				tMysqlInput_2Process(globalMap);

				row3Struct row3 = new row3Struct();
				tStruct t = new tStruct();
				row5Struct row5 = new row5Struct();

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash
						.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				int tos_count_tSortRow_1_SortOut = 0;

				class ComparabletStruct extends tStruct implements
						Comparable<ComparabletStruct> {

					public int compareTo(ComparabletStruct other) {

						if (this.num_man == null && other.num_man != null) {
							return -1;

						} else if (this.num_man != null
								&& other.num_man == null) {
							return 1;

						} else if (this.num_man != null
								&& other.num_man != null) {
							if (!this.num_man.equals(other.num_man)) {
								return this.num_man.compareTo(other.num_man);
							}
						}
						return 0;
					}
				}

				java.util.List<ComparabletStruct> list_tSortRow_1_SortOut = new java.util.ArrayList<ComparabletStruct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) globalMap
						.get("tHash_Lookup_row1"));

				row1Struct row1HashKey = new row1Struct();
				row1Struct row1Default = new row1Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				tStruct t_tmp = new tStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlInput_1);
				String dbUser_tMysqlInput_1 = "root";

				final String decryptedPassword_tMysqlInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("f9aa01009ec970ef");

				String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;

				String url_tMysqlInput_1 = "jdbc:mysql://" + "" + ":" + "3306"
						+ "/" + "remorquages" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_1, dbUser_tMysqlInput_1,
						dbPwd_tMysqlInput_1);

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();

				String dbquery_tMysqlInput_1 = "select e.code_r, r.desig_r,e.hdm,e.hfm,DAY(e.ddm) as maDatejour, MONTH(e.ddm) as maDateMois,YEAR(e.ddm) as maDateAnnee,e.num_man,p.code_p,p.design_p,m.num_gros  from  remorqueur r,effectuer e,manoeuvres m,prestations p where\ne.num_man=m.num_man and m.code_p=p.code_p and r.code_r=e.code_r";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);
				java.sql.ResultSet rs_tMysqlInput_1 = null;
				try {
					rs_tMysqlInput_1 = stmt_tMysqlInput_1
							.executeQuery(dbquery_tMysqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
							.getMetaData();
					int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
							.getColumnCount();

					String tmpContent_tMysqlInput_1 = null;

					while (rs_tMysqlInput_1.next()) {
						nb_line_tMysqlInput_1++;

						if (colQtyInRs_tMysqlInput_1 < 1) {
							row3.code_r = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(1);
							if (tmpContent_tMysqlInput_1 != null) {
								row3.code_r = tmpContent_tMysqlInput_1;
							} else {
								row3.code_r = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 2) {
							row3.desig_r = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(2);
							if (tmpContent_tMysqlInput_1 != null) {
								row3.desig_r = tmpContent_tMysqlInput_1;
							} else {
								row3.desig_r = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 3) {
							row3.hdm = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(3);
							if (tmpContent_tMysqlInput_1 != null) {
								row3.hdm = tmpContent_tMysqlInput_1;
							} else {
								row3.hdm = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 4) {
							row3.hfm = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(4);
							if (tmpContent_tMysqlInput_1 != null) {
								row3.hfm = tmpContent_tMysqlInput_1;
							} else {
								row3.hfm = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 5) {
							row3.jour = null;
						} else {

							if (rs_tMysqlInput_1.getObject(5) != null) {
								row3.jour = rs_tMysqlInput_1.getInt(5);
							} else {
								row3.jour = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 6) {
							row3.month = null;
						} else {

							if (rs_tMysqlInput_1.getObject(6) != null) {
								row3.month = rs_tMysqlInput_1.getInt(6);
							} else {
								row3.month = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 7) {
							row3.annee = null;
						} else {

							if (rs_tMysqlInput_1.getObject(7) != null) {
								row3.annee = rs_tMysqlInput_1.getInt(7);
							} else {
								row3.annee = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 8) {
							row3.num_man = null;
						} else {

							if (rs_tMysqlInput_1.getObject(8) != null) {
								row3.num_man = rs_tMysqlInput_1.getInt(8);
							} else {
								row3.num_man = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 9) {
							row3.code_p = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(9) != null) {
								row3.code_p = rs_tMysqlInput_1.getInt(9);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 10) {
							row3.design_p = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(10);
							if (tmpContent_tMysqlInput_1 != null) {
								row3.design_p = tmpContent_tMysqlInput_1;
							} else {
								row3.design_p = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 11) {
							row3.num_gros = null;
						} else {

							if (rs_tMysqlInput_1.getObject(11) != null) {
								row3.num_gros = rs_tMysqlInput_1.getInt(11);
							} else {
								row3.num_gros = null;
							}
						}

						/**
						 * [tMysqlInput_1 begin ] stop
						 */

						/**
						 * [tMysqlInput_1 main ] start
						 */

						currentComponent = "tMysqlInput_1";

						tos_count_tMysqlInput_1++;

						/**
						 * [tMysqlInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row4"
						// /////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row4HashKey.idmois = row3.month;

							row4HashKey.hashCodeDirty = true;

							tHash_Lookup_row4.lookup(row4HashKey);

							if (!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.idmois = '"
							// + row4HashKey.idmois + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row1"
						// /////////////////////////////////////////////

						boolean forceLooprow1 = false;

						row1Struct row1ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row1__num_gros = row3.num_gros;
							if (exprKeyValue_row1__num_gros == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row1HashKey.num_gros = (int) (Integer) exprKeyValue_row1__num_gros;
							}

							row1HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row1.lookup(row1HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_1
									|| !tHash_Lookup_row1.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row1 != null
								&& tHash_Lookup_row1.getCount(row1HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row1' and it contains more one result from keys :  row1.num_gros = '"
							// + row1HashKey.num_gros + "'");
						} // G 071

						row1Struct row1 = null;

						row1Struct fromLookup_row1 = null;
						row1 = row1Default;

						if (tHash_Lookup_row1 != null
								&& tHash_Lookup_row1.hasNext()) { // G 099

							fromLookup_row1 = tHash_Lookup_row1.next();

						} // G 099

						if (fromLookup_row1 != null) {
							row1 = fromLookup_row1;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							t = null;

							if (!rejectedInnerJoin_tMap_1) {

								// # Output table : 't'
								t_tmp.code_r = row3.code_r;
								t_tmp.desig_r = row3.desig_r;
								t_tmp.dif = routines.time.timeDifference(
										row3.hdm, row3.hfm);
								t_tmp.jour = row3.jour;
								t_tmp.month = row3.month;
								t_tmp.mois = row4.mois;
								t_tmp.annee = row3.annee;
								t_tmp.num_man = row3.num_man;
								t_tmp.code_p = row3.code_p;
								t_tmp.design_p = row3.design_p;
								t_tmp.poste = row1.poste;
								t_tmp.type_nav = row1.type_nav;
								t_tmp.nom_nav = row1.nom_nav;
								t_tmp.sejour = row1.sejour;
								t_tmp.num_gros = row3.num_gros;
								t_tmp.pavilion = row1.pavilion;
								t = t_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "t"
						if (t != null) {

							/**
							 * [tSortRow_1_SortOut main ] start
							 */

							currentVirtualComponent = "tSortRow_1";

							currentComponent = "tSortRow_1_SortOut";

							ComparabletStruct arrayRowtSortRow_1_SortOut = new ComparabletStruct();

							arrayRowtSortRow_1_SortOut.code_r = t.code_r;
							arrayRowtSortRow_1_SortOut.desig_r = t.desig_r;
							arrayRowtSortRow_1_SortOut.dif = t.dif;
							arrayRowtSortRow_1_SortOut.jour = t.jour;
							arrayRowtSortRow_1_SortOut.month = t.month;
							arrayRowtSortRow_1_SortOut.mois = t.mois;
							arrayRowtSortRow_1_SortOut.annee = t.annee;
							arrayRowtSortRow_1_SortOut.num_man = t.num_man;
							arrayRowtSortRow_1_SortOut.code_p = t.code_p;
							arrayRowtSortRow_1_SortOut.design_p = t.design_p;
							arrayRowtSortRow_1_SortOut.poste = t.poste;
							arrayRowtSortRow_1_SortOut.type_nav = t.type_nav;
							arrayRowtSortRow_1_SortOut.nom_nav = t.nom_nav;
							arrayRowtSortRow_1_SortOut.sejour = t.sejour;
							arrayRowtSortRow_1_SortOut.num_gros = t.num_gros;
							arrayRowtSortRow_1_SortOut.pavilion = t.pavilion;
							list_tSortRow_1_SortOut
									.add(arrayRowtSortRow_1_SortOut);

							tos_count_tSortRow_1_SortOut++;

							/**
							 * [tSortRow_1_SortOut main ] stop
							 */

						} // End of branch "t"

						/**
						 * [tMysqlInput_1 end ] start
						 */

						currentComponent = "tMysqlInput_1";

					}
				} finally {
					if (rs_tMysqlInput_1 != null) {
						rs_tMysqlInput_1.close();
					}
					stmt_tMysqlInput_1.close();
					if (conn_tMysqlInput_1 != null
							&& !conn_tMysqlInput_1.isClosed()) {

						conn_tMysqlInput_1.close();

					}

				}
				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				if (tHash_Lookup_row1 != null) {
					tHash_Lookup_row1.endGet();
				}
				globalMap.remove("tHash_Lookup_row1");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				tStruct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut
						.toArray(new ComparabletStruct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Users/Raouf/out10.csv")).getAbsolutePath().replace(
						"\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {

						dir_tFileOutputDelimited_1.mkdirs();

					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}

				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								"ISO-8859-15"));

				if (filetFileOutputDelimited_1.length() == 0) {

					outtFileOutputDelimited_1.write("code_r");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("desig_r");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("dif");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("jour");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("month");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("mois");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("annee");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("num_man");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("code_p");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("design_p");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("poste");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("type_nav");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("nom_nav");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("sejour");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("num_gros");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write("pavilion");

					outtFileOutputDelimited_1
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);

				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				tStruct[] array_tSortRow_1_SortIn = (tStruct[]) globalMap
						.get("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				tStruct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row5.code_r = current_tSortRow_1_SortIn.code_r;
					row5.desig_r = current_tSortRow_1_SortIn.desig_r;
					row5.dif = current_tSortRow_1_SortIn.dif;
					row5.jour = current_tSortRow_1_SortIn.jour;
					row5.month = current_tSortRow_1_SortIn.month;
					row5.mois = current_tSortRow_1_SortIn.mois;
					row5.annee = current_tSortRow_1_SortIn.annee;
					row5.num_man = current_tSortRow_1_SortIn.num_man;
					row5.code_p = current_tSortRow_1_SortIn.code_p;
					row5.design_p = current_tSortRow_1_SortIn.design_p;
					row5.poste = current_tSortRow_1_SortIn.poste;
					row5.type_nav = current_tSortRow_1_SortIn.type_nav;
					row5.nom_nav = current_tSortRow_1_SortIn.nom_nav;
					row5.sejour = current_tSortRow_1_SortIn.sejour;
					row5.num_gros = current_tSortRow_1_SortIn.num_gros;
					row5.pavilion = current_tSortRow_1_SortIn.pavilion;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 main ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

					if (row5.code_r != null) {

						sb_tFileOutputDelimited_1.append(

						row5.code_r

						);

					}

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					if (row5.desig_r != null) {

						sb_tFileOutputDelimited_1.append(

						row5.desig_r

						);

					}

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					if (row5.dif != null) {

						sb_tFileOutputDelimited_1.append(

						row5.dif

						);

					}

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					sb_tFileOutputDelimited_1.append(

					row5.jour

					);

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					if (row5.month != null) {

						sb_tFileOutputDelimited_1.append(

						row5.month

						);

					}

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					if (row5.mois != null) {

						sb_tFileOutputDelimited_1.append(

						row5.mois

						);

					}

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					sb_tFileOutputDelimited_1.append(

					row5.annee

					);

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					if (row5.num_man != null) {

						sb_tFileOutputDelimited_1.append(

						row5.num_man

						);

					}

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					sb_tFileOutputDelimited_1.append(

					row5.code_p

					);

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					if (row5.design_p != null) {

						sb_tFileOutputDelimited_1.append(

						row5.design_p

						);

					}

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					if (row5.poste != null) {

						sb_tFileOutputDelimited_1.append(

						row5.poste

						);

					}

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					if (row5.type_nav != null) {

						sb_tFileOutputDelimited_1.append(

						row5.type_nav

						);

					}

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					if (row5.nom_nav != null) {

						sb_tFileOutputDelimited_1.append(

						row5.nom_nav

						);

					}

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					if (row5.sejour != null) {

						sb_tFileOutputDelimited_1.append(

						row5.sejour

						);

					}

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					if (row5.num_gros != null) {

						sb_tFileOutputDelimited_1.append(

						row5.num_gros

						);

					}

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_tFileOutputDelimited_1);

					if (row5.pavilion != null) {

						sb_tFileOutputDelimited_1.append(

						row5.pavilion

						);

					}

					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

					nb_line_tFileOutputDelimited_1++;
					resourceMap.put("nb_line_tFileOutputDelimited_1",
							nb_line_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1
							.toString());

					tos_count_tFileOutputDelimited_1++;

					/**
					 * [tFileOutputDelimited_1 main ] stop
					 */

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE",
						nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row1");

			try {

				/**
				 * [tMysqlInput_1 finally ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Travail_final = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Travail_final = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer idmois;

		public Integer getIdmois() {
			return this.idmois;
		}

		public String mois;

		public String getMois() {
			return this.mois;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.idmois == null) ? 0 : this.idmois.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.idmois == null) {
				if (other.idmois != null)
					return false;

			} else if (!this.idmois.equals(other.idmois))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.idmois = this.idmois;
			other.mois = this.mois;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.idmois = this.idmois;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Travail_final) {

				try {

					int length = 0;

					this.idmois = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.idmois, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.mois = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.mois, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idmois=" + String.valueOf(idmois));
			sb.append(",mois=" + mois);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idmois, other.idmois);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tFileInputDelimited_1 -
				// inputs:(after_tMysqlInput_1) outputs:(row4,row4) | target
				// node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row3,row4,row1) outputs:(t)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/Raouf/Desktop/mois.txt";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/Raouf/Desktop/mois.txt", "UTF-8",
								";", "\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {

						row4 = null;

						row4 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row4 = new row4Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								row4.idmois = ParserUtils.parseTo_Integer(temp);

							} else {

								row4.idmois = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row4.mois = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tAdvancedHash_row4 main ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							row4Struct row4_HashRow = new row4Struct();

							row4_HashRow.idmois = row4.idmois;

							row4_HashRow.mois = row4.mois;

							tHash_Lookup_row4.put(row4_HashRow);

							tos_count_tAdvancedHash_row4++;

							/**
							 * [tAdvancedHash_row4 main ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/Raouf/Desktop/mois.txt") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableComparableLookupRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Travail_final = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Travail_final = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int num_gros;

		public int getNum_gros() {
			return this.num_gros;
		}

		public String poste;

		public String getPoste() {
			return this.poste;
		}

		public String type_nav;

		public String getType_nav() {
			return this.type_nav;
		}

		public String nom_nav;

		public String getNom_nav() {
			return this.nom_nav;
		}

		public Integer sejour;

		public Integer getSejour() {
			return this.sejour;
		}

		public String pavilion;

		public String getPavilion() {
			return this.pavilion;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.num_gros;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.num_gros != other.num_gros)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.num_gros = this.num_gros;
			other.poste = this.poste;
			other.type_nav = this.type_nav;
			other.nom_nav = this.nom_nav;
			other.sejour = this.sejour;
			other.pavilion = this.pavilion;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.num_gros = this.num_gros;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Travail_final) {

				try {

					int length = 0;

					this.num_gros = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.num_gros);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.poste = readString(dis, ois);

				this.type_nav = readString(dis, ois);

				this.nom_nav = readString(dis, ois);

				this.sejour = readInteger(dis, ois);

				this.pavilion = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.poste, dos, oos);

				writeString(this.type_nav, dos, oos);

				writeString(this.nom_nav, dos, oos);

				writeInteger(this.sejour, dos, oos);

				writeString(this.pavilion, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("num_gros=" + String.valueOf(num_gros));
			sb.append(",poste=" + poste);
			sb.append(",type_nav=" + type_nav);
			sb.append(",nom_nav=" + nom_nav);
			sb.append(",sejour=" + String.valueOf(sejour));
			sb.append(",pavilion=" + pavilion);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.num_gros, other.num_gros);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tAdvancedHash_row1 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row1", false);
				start_Hash
						.put("tAdvancedHash_row1", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row1";

				int tos_count_tAdvancedHash_row1 = 0;

				// connection name:row1
				// source node:tMysqlInput_2 - inputs:(after_tMysqlInput_1)
				// outputs:(row1,row1) | target node:tAdvancedHash_row1 -
				// inputs:(row1) outputs:()
				// linked node: tMap_1 - inputs:(row3,row4,row1) outputs:(t)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row1Struct> getLookup(matchingModeEnum_row1);

				globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);

				/**
				 * [tAdvancedHash_row1 begin ] stop
				 */

				/**
				 * [tMysqlInput_2 begin ] start
				 */

				ok_Hash.put("tMysqlInput_2", false);
				start_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				currentComponent = "tMysqlInput_2";

				int tos_count_tMysqlInput_2 = 0;

				java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2
						.getTime();
				int nb_line_tMysqlInput_2 = 0;
				java.sql.Connection conn_tMysqlInput_2 = null;
				String driverClass_tMysqlInput_2 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlInput_2);
				String dbUser_tMysqlInput_2 = "root";

				final String decryptedPassword_tMysqlInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("f9aa01009ec970ef");

				String dbPwd_tMysqlInput_2 = decryptedPassword_tMysqlInput_2;

				String url_tMysqlInput_2 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "escales" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_2, dbUser_tMysqlInput_2,
						dbPwd_tMysqlInput_2);

				java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2
						.createStatement();

				String dbquery_tMysqlInput_2 = "select e.num_gros,p.poste,t.type_nav,n.nom_nav,DATEDIFF(e. date_s,  e.date_e) AS sejour,pa.pavilon  from pavilon pa,  escale e ,accoster a, poste p, navire n,type_navire t where\ne.num_gros=a.num_gros and a.code_poste=p.code_poste and e.imo=n.imo and n.code_tn=t.code_tn and n.code_pav=pa.code_pav\n\n\n\n";

				globalMap.put("tMysqlInput_2_QUERY", dbquery_tMysqlInput_2);
				java.sql.ResultSet rs_tMysqlInput_2 = null;
				try {
					rs_tMysqlInput_2 = stmt_tMysqlInput_2
							.executeQuery(dbquery_tMysqlInput_2);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2
							.getMetaData();
					int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2
							.getColumnCount();

					String tmpContent_tMysqlInput_2 = null;

					while (rs_tMysqlInput_2.next()) {
						nb_line_tMysqlInput_2++;

						if (colQtyInRs_tMysqlInput_2 < 1) {
							row1.num_gros = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(1) != null) {
								row1.num_gros = rs_tMysqlInput_2.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 2) {
							row1.poste = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(2);
							if (tmpContent_tMysqlInput_2 != null) {
								row1.poste = tmpContent_tMysqlInput_2;
							} else {
								row1.poste = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 3) {
							row1.type_nav = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(3);
							if (tmpContent_tMysqlInput_2 != null) {
								row1.type_nav = tmpContent_tMysqlInput_2;
							} else {
								row1.type_nav = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 4) {
							row1.nom_nav = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(4);
							if (tmpContent_tMysqlInput_2 != null) {
								row1.nom_nav = tmpContent_tMysqlInput_2;
							} else {
								row1.nom_nav = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 5) {
							row1.sejour = null;
						} else {

							if (rs_tMysqlInput_2.getObject(5) != null) {
								row1.sejour = rs_tMysqlInput_2.getInt(5);
							} else {
								row1.sejour = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 6) {
							row1.pavilion = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(6);
							if (tmpContent_tMysqlInput_2 != null) {
								row1.pavilion = tmpContent_tMysqlInput_2;
							} else {
								row1.pavilion = null;
							}
						}

						/**
						 * [tMysqlInput_2 begin ] stop
						 */

						/**
						 * [tMysqlInput_2 main ] start
						 */

						currentComponent = "tMysqlInput_2";

						tos_count_tMysqlInput_2++;

						/**
						 * [tMysqlInput_2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row1 main ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						row1Struct row1_HashRow = new row1Struct();

						row1_HashRow.num_gros = row1.num_gros;

						row1_HashRow.poste = row1.poste;

						row1_HashRow.type_nav = row1.type_nav;

						row1_HashRow.nom_nav = row1.nom_nav;

						row1_HashRow.sejour = row1.sejour;

						row1_HashRow.pavilion = row1.pavilion;

						tHash_Lookup_row1.put(row1_HashRow);

						tos_count_tAdvancedHash_row1++;

						/**
						 * [tAdvancedHash_row1 main ] stop
						 */

						/**
						 * [tMysqlInput_2 end ] start
						 */

						currentComponent = "tMysqlInput_2";

					}
				} finally {
					if (rs_tMysqlInput_2 != null) {
						rs_tMysqlInput_2.close();
					}
					stmt_tMysqlInput_2.close();
					if (conn_tMysqlInput_2 != null
							&& !conn_tMysqlInput_2.isClosed()) {

						conn_tMysqlInput_2.close();

					}

				}
				globalMap.put("tMysqlInput_2_NB_LINE", nb_line_tMysqlInput_2);

				ok_Hash.put("tMysqlInput_2", true);
				end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				/**
				 * [tMysqlInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row1 end ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				tHash_Lookup_row1.endPut();

				ok_Hash.put("tAdvancedHash_row1", true);
				end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_2 finally ] start
				 */

				currentComponent = "tMysqlInput_2";

				/**
				 * [tMysqlInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row1 finally ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				/**
				 * [tAdvancedHash_row1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Travail_final Travail_finalClass = new Travail_final();

		int exitCode = Travail_finalClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Travail_final.class
					.getClassLoader().getResourceAsStream(
							"projectname/travail_final_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMysqlInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMysqlInput_1) {
			globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", -1);

			e_tMysqlInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Travail_final");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 132403 characters generated by Talend Open Studio for Data Integration on the
 * 10 mai 2015 23:44:14 GMT+01:00
 ************************************************************************************************/
